plugins {
	id 'fabric-loom' version '0.5-SNAPSHOT'
	id 'maven-publish'
}

repositories {
	maven {
		name = 'Fabric'
		url = 'https://maven.fabricmc.net/'
	}
	mavenCentral()
	jcenter()

}

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group
nestedJars = []
fileTree(dir: 'nested', include: '**/*.jar').visit { FileVisitDetails details ->
	nestedJars.add('{"file": "nested/' + details.file.name + '"}')
}
def jarName = "${archivesBaseName}-${version}.jar"

dependencies {
	//to change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
	// Fabric API. This is technically optional, but you probably want it anyway.
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
	modImplementation "io.github.prospector:modmenu:${project.modmenu_version}"

	// PSA: Some older mods, compiled on Loom 0.2.1, might have outdated Maven POMs.
	// You may need to force-disable transitiveness on them.
	implementation group: 'org.javassist', name: 'javassist', version: '3.23.1-GA'
}

processResources {
	Map<String, String> expandMap = [version:project.version, 
		nestedJars: project.nestedJars,
		minecraft_version: project.minecraft_version,
		loader_version: project.loader_version]
	inputs.property "version", project.version
	inputs.property "nestedJars", project.nestedJars
	inputs.property "minecraft_version", project.minecraft_version
	inputs.property "loader_version", project.loader_version
	
	from(sourceSets.main.resources.srcDirs) {
		include "fabric.mod.json"
		expand expandMap
	}

	from(sourceSets.main.resources.srcDirs) {
		exclude "fabric.mod.json"
	}
}

// ensure that the encoding is set to UTF-8, no matter what the system default is
// this fixes some edge cases with special characters not displaying correctly
// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
tasks.withType(JavaCompile) {
	options.encoding = "UTF-8"
}

// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
// if it is present.
// If you remove this task, sources will not be generated.
task sourcesJar(type: Jar, dependsOn: classes) {
	classifier = "sources"
	from sourceSets.main.allSource
}

jar {
	into 'nested', {
	  from 'nested'
	}
	into 'loadedJars', { from 'loadedJars' }
  }
  
// configure the maven publication
publishing {
	publications {
		mavenJava(MavenPublication) {
			// add all the jars that should be included when publishing to maven
			artifact(remapJar) {
				builtBy remapJar
			}
			artifact(sourcesJar) {
				builtBy remapSourcesJar
			}
		}
	}


	repositories {
		// uncomment to publish to the local maven
		// mavenLocal()
	}
}

task startBuildMsg {
	outputs.upToDateWhen { false }
	println '-------------------------------------------------------'
	println '              Starting Mod Manager Build                 '
	println '-------------------------------------------------------'
	println ' APPDATA Folder       : ' + System.getenv('APPDATA') + " ."
	println ' org.gradle.jvmargs   : ' + findProperty('org.gradle.jvmargs') + " ."
	println ' org.gradle.java.home : ' + findProperty('org.gradle.java.home') + " ."
	println ' minecraft_version    : ' + findProperty('minecraft_version') + " ."
	println ' loader_version       : ' + findProperty('loader_version') + " ."
	println ' modmenu_version      : ' + findProperty('modmenu_version') + " ."
}
task endBuildMsg {
	outputs.upToDateWhen { false }
	println '-------------------------------------------------------'
	println '              Ending Mod Manager Build                 '
	println '-------------------------------------------------------'
}
// Task to copy the latest mod jar file to the minecraft mod folder.
task('publishMod', type: Copy) {
	
	def fileName = "$buildDir/libs/$jarName"
	def appDataFolder = System.getenv('APPDATA')
	from(file(fileName))
	into("$appDataFolder/.minecraft/mods")
}

// Task to copy the latest mod jar file to the minecraft mod folder.
task('publishDebugMod', type: Copy) {
	
	def fileName = "$buildDir/libs/$jarName"
	from(file(fileName))
	into("run/mods")
}

// Task to build the mod and copy it to the minecraft mod folder
task all{
	dependsOn 'startBuildMsg'
	dependsOn 'buildNeeded'
	dependsOn 'publishMod'
	dependsOn 'publishDebugMod'
	dependsOn 'endBuildMsg'
	tasks.findByName('publishMod').mustRunAfter 'buildNeeded'
	tasks.findByName('publishDebugMod').mustRunAfter 'publishMod'
}
